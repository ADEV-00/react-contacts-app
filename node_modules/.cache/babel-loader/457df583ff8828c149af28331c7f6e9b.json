{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADEV\\\\Desktop\\\\#100daysofcode\\\\Contacts\\\\contacts-app\\\\src\\\\ListContacts.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport escapeRegExp from \"escape-string-regexp\";\nimport sortBy from \"sort-by\"; //Stateless Functional Component\n//Using this when all the component needs is a render method\n//In stateless functional component dont need to use \".this\"\n\nclass ListContacts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: \"\"\n    };\n\n    this.updateQuery = query => {\n      this.setState({\n        query: query.trim()\n      });\n    };\n\n    this.clearQuery = () => {\n      this.setState({\n        query: \"\"\n      });\n    };\n  }\n\n  render() {\n    //Object Destructuring\n    const _this$props = this.props,\n          contacts = _this$props.contacts,\n          onDeleteContact = _this$props.onDeleteContact;\n    const query = this.state.query;\n    let showingContacts;\n\n    if (query) {\n      const match = new RegExp(escapeRegExp(query), \"i\");\n      showingContacts = contacts.filter(contact => match.test(contact.name));\n    } else {\n      showingContacts = contacts;\n    }\n\n    showingContacts.sort(sortBy(\"name\"));\n    return React.createElement(\"div\", {\n      className: \"list-contacts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list-contacts-top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"search-contacts\",\n      type: \"text\",\n      placeholder: \"Search Contacts\",\n      value: this.state.query,\n      onChange: event => this.updateQuery(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), showingContacts.length !== contacts.length && React.createElement(\"div\", {\n      className: \"showing-contacts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Now showing \", showingContacts.length, \" of \", contacts.length), React.createElement(\"button\", {\n      onClick: this.clearQuery,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Show All\")), React.createElement(\"ol\", {\n      className: \"contact-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, showingContacts.map(contact => React.createElement(\"li\", {\n      key: contact.id,\n      className: \"contact-list-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"contact-avatar\",\n      style: {\n        backgroundImage: `url(${contact.avatarURL})`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"contact-details\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, contact.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, contact.email)), React.createElement(\"button\", {\n      onClick: () => onDeleteContact(contact),\n      className: \"contact-remove\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Remove\")))));\n  }\n\n}\n\nListContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired\n};\nexport default ListContacts;","map":{"version":3,"sources":["C:/Users/ADEV/Desktop/#100daysofcode/Contacts/contacts-app/src/ListContacts.js"],"names":["React","Component","PropTypes","escapeRegExp","sortBy","ListContacts","state","query","updateQuery","setState","trim","clearQuery","render","props","contacts","onDeleteContact","showingContacts","match","RegExp","filter","contact","test","name","sort","event","target","value","length","map","id","backgroundImage","avatarURL","email","propTypes","array","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport escapeRegExp from \"escape-string-regexp\";\r\nimport sortBy from \"sort-by\";\r\n\r\n//Stateless Functional Component\r\n//Using this when all the component needs is a render method\r\n//In stateless functional component dont need to use \".this\"\r\nclass ListContacts extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired\r\n  };\r\n\r\n  state = {\r\n    query: \"\"\r\n  };\r\n\r\n  updateQuery = query => {\r\n    this.setState({ query: query.trim() });\r\n  };\r\n\r\n  clearQuery = () => {\r\n    this.setState({ query: \"\" });\r\n  };\r\n\r\n  render() {\r\n    //Object Destructuring\r\n    const { contacts, onDeleteContact } = this.props;\r\n    const { query } = this.state;\r\n\r\n    let showingContacts;\r\n    if (query) {\r\n      const match = new RegExp(escapeRegExp(query), \"i\");\r\n      showingContacts = contacts.filter(contact => match.test(contact.name));\r\n    } else {\r\n      showingContacts = contacts;\r\n    }\r\n\r\n    showingContacts.sort(sortBy(\"name\"));\r\n\r\n    return (\r\n      <div className=\"list-contacts\">\r\n        <div className=\"list-contacts-top\">\r\n          <input\r\n            className=\"search-contacts\"\r\n            type=\"text\"\r\n            placeholder=\"Search Contacts\"\r\n            value={this.state.query}\r\n            onChange={event => this.updateQuery(event.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {showingContacts.length !== contacts.length && (\r\n          <div className=\"showing-contacts\">\r\n            <span>\r\n              Now showing {showingContacts.length} of {contacts.length}\r\n            </span>\r\n            <button onClick={this.clearQuery}>Show All</button>\r\n          </div>\r\n        )}\r\n\r\n        <ol className=\"contact-list\">\r\n          {/* Looping all in contact array and displaying */}\r\n          {showingContacts.map(contact => (\r\n            <li key={contact.id} className=\"contact-list-item\">\r\n              <div\r\n                className=\"contact-avatar\"\r\n                style={{\r\n                  backgroundImage: `url(${contact.avatarURL})`\r\n                }}\r\n              />\r\n              <div className=\"contact-details\">\r\n                <p>{contact.name}</p>\r\n                <p>{contact.email}</p>\r\n              </div>\r\n              <button\r\n                onClick={() => onDeleteContact(contact)}\r\n                className=\"contact-remove\"\r\n              >\r\n                Remove\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListContacts;\r\n"]},"metadata":{},"sourceType":"module"}